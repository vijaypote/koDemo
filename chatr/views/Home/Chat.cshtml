
<!--[if gte IE 9]>
  <style type="text/css">
    .gradient {
       filter: none;
    }
  </style>
<![endif]-->

<style>
    body 
    {
        background-color: #E6E6E6;
    }
</style>

@if (false) { 
    <script src="../../Scripts/jquery-1.7.2-vsdoc.js" type="text/javascript"></script>
}

<div id="header" class="gradient">
    <h2>ChatR</h2>
</div>

<div id="myContainer" class="container-fluid">  
    <div id="compose" class="row-fluid">
        <div class="span2"></div>
        <div class="span8">
            <div class="row-fluid">
                <input type="hidden" id="id" value="1" />
                <input type="hidden" id="parentid" value="0" />
                <input type="hidden" id="nestlevel" value="0" />

                <div class="span10"><textarea id="compose-box" rows="2" cols="50" placeholder="Type your message here"></textarea></div>
                <div class="span2"><button id="send-btn" type="submit" class="btn btn-large btn-primary">Send</button>   </div>
            </div>
        </div>
    </div>  
    <div class="row-fluid">
        <!-- This  is the contact box -->        
        <div id="users-list" class="span2">
            <h4>Users</h4> 
            <ul data-bind="foreach: contacts">
                <li class="user-box"><span class="user-box-name" data-bind="text: username"></span></li>
            </ul>
        </div>
        <!-- This  is the chat box -->
        <div id="chat-list" class="span8" data-bind="foreach: messages">
            <ul>
                <li>
                    <div class="chat-listitem-username" data-bind="text: username"></div>                
                    <div class="chat-listitem-message" data-bind="html: content"></div>                
                    <div class="chat-listitem-timestamp" data-bind="text: timestamp.toLocaleTimeString()"></div>
                    <div>
                        <input type="hidden" id="replyId" data-bind="value:replyId" />
                        <input type="hidden" id="replyParentId" data-bind="value:replyParentId" />
                        <input type="hidden" id="replyNestLevel" data-bind="value:replyNestLevel" /> 

                        <input type="text" name="newMessage" data-bind="value:newMessage" placeholder="Reply here..." />
                        <button class="btn btn-small" data-bind="click: replyToMessage">Reply</button>
                    </div>
                </li>
            </ul>
        </div>
    </div>   
</div>

<script type="text/javascript" src="@Url.Content("/signalr/hubs")"></script>  
<script type="text/javascript" src="@Url.Content("~/Js/chatR.js")"></script>
<script type="text/javascript">


    function callAjax(replyMessage)
    {
        alert(replyMessage);
        var chatHub = $.connection.chatHub; // chatHub is the name of the Hub as declared in server side code

        var chat = new chatR.chatViewModel();
        var users = new chatR.connectedUsersViewModel();
        var currentUser = new chatR.user(@Html.Raw(Json.Encode(Model)));
        var reply = replyMessage || $("#reply-box").val();

        if (reply != "" && reply != null) {
            var id = $("#replyId").val();
            var parentid = $("#replyParentId").val();
            var nestlevel = $("#replyNestLevel").val();

            var msg = new chatR.chatMessage(id, parentid, nestlevel, currentUser.username, reply);          
            
            chatHub.server.send(msg).done(function () {
                $("#reply-box").val("");
                //$("#reply-box").attr("disabled", "disabled");
            }).fail(function (e) {
                alert("Could not connect to server");
            });
        }
    }   

    Date.prototype.setISO8601 = function(dString){

        var regexp = /(\d\d\d\d)(-)?(\d\d)(-)?(\d\d)(T)?(\d\d)(:)?(\d\d)(:)?(\d\d)(\.\d+)?(Z|([+-])(\d\d)(:)?(\d\d))/;

        if (dString.toString().match(new RegExp(regexp))) {
            var d = dString.match(new RegExp(regexp));
            var offset = 0;

            this.setUTCDate(1);
            this.setUTCFullYear(parseInt(d[1],10));
            this.setUTCMonth(parseInt(d[3],10) - 1);
            this.setUTCDate(parseInt(d[5],10));
            this.setUTCHours(parseInt(d[7],10));
            this.setUTCMinutes(parseInt(d[9],10));
            this.setUTCSeconds(parseInt(d[11],10));
            if (d[12])
                this.setUTCMilliseconds(parseFloat(d[12]) * 1000);
            else
                this.setUTCMilliseconds(0);
            if (d[13] != 'Z') {
                offset = (d[15] * 60) + parseInt(d[17],10);
                offset *= ((d[14] == '-') ? -1 : 1);
                this.setTime(this.getTime() - offset * 60 * 1000);
            }
        }
        else {
            this.setTime(Date.parse(dString));
        }
        return this;
    };

    $(document).ready(function () {

        $('.reply').on(function() {
            callAjax();
        });

        //alert("hello");
        var chat = new chatR.chatViewModel();
        var users = new chatR.connectedUsersViewModel();
        var currentUser = new chatR.user(@Html.Raw(Json.Encode(Model))); // The username chose by the user is stored in the model

        // Proxy creation
        var chatHub = $.connection.chatHub; // chatHub is the name of the Hub as declared in server side code
        chatHub.state.username = currentUser.username; // This is the round-trip state

        // Client-side event handlers, as declared inside the  Hub
        chatHub.client.onMessageReceived = function (message) {
            var date = new Date();
            date.setISO8601(message.Timestamp);
            //alert(message.Replyhtml);
            chat.messages.push(new chatR.chatMessage(message.id, message.parentid, message.nestlevel, message.Username, message.Content, date, callAjax));//new Date(message.Timestamp)));
            $("#chat-list").scrollTo('max');
        }
        
        chatHub.client.leaves = function (userId, username, timestamp) {
            var disconnectedUser = new chatR.user(username, userId);
            users.customRemove(disconnectedUser);
        }

        chatHub.client.joins = function (userId, username, timestamp) {
            var connectedUser = new chatR.user(username, userId);
            users.contacts.push(connectedUser);
        }

        function sendMessageContent() {
            
            var content = $("#compose-box").val();
            var id = $("#id").val();
            var parentid = $("#parentid").val();
            var nestlevel = $("#nestlevel").val();
            //alert(parentid);
            if (content != "" && content != null) {
                var msg = new chatR.chatMessage(id, parentid, nestlevel, currentUser.username, content);
                chatHub.server.send(msg).done(function () {
                    $("#compose-box").val("");
                }).fail(function (e) {
                    alert("Could not connect to server");
                });
            }
        }

        $("#send-btn").click(function () {
            sendMessageContent();
        });

        //$("#reply-btn").click(function () {
        //    alert("Reply");
        //    sendMessageContent();
        //});

        // Handles Enter keystroke press event
        $('#compose-box').keypress(function (e) {
            if (e.which == 13) {
                sendMessageContent();
            }
        });

        ko.applyBindings(users, $("#users-list")[0]);
        ko.applyBindings(chat, $("#chat-list")[0]);

        $.connection.hub.start()
                    .done(function () {
                        chatHub.server.getConnectedUsers()
                                    .done(function (connectedUsers) {
                                        ko.utils.arrayForEach(connectedUsers, function (item) {
                                            users.contacts.push(new chatR.user(item.Username, item.Id));
                                        });
                                    }).done(function () {
                                        chatHub.server.joined();
                                    });
                    });
    }); 

</script>
