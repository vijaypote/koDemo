<!--[if gte IE 9]>
  <style type="text/css">
    .gradient {
       filter: none;
    }
  </style>
<![endif]-->

<style>
    body {
        background-color: #E6E6E6;
    }


    body {
        background: white;
        font-family: Segoe,"Segoe UI",Calibri,Arial,Sans-Serif;
        padding: 50px;
    }

    /* Framework start from here */
    ul.tree,
    ul.tree ul {
        list-style: none;
        margin: 0;
        padding: 0;
    }

        ul.tree ul {
            margin-left: 10px; /* indentation */
            position: relative;
        }

            ul.tree ul:before {
                content: "";
                display: block;
                width: 0;
                position: absolute;
                top: 0;
                bottom: 0;
            }

        ul.tree li {
            margin: 0;
            padding: 0 12px; /* indentation + 2 */
            font-size: 14px;
            line-height: 20px; /* default list item `line-height` */
            color: #369;
            font-weight: bold;
            position: relative;
            margin-left:15px;
        }

        ul.tree ul li:before {
            content: "";
            display: block;
            width: 10px; /* same with indentation */
            height: 0;
            position: absolute;
            top: 10px;
            left: 0;
        }

        ul.tree ul li:last-child:before {
            background: white; /* same with body background */
            height: auto;
            top: 10px; /* (line-height/2) */
            bottom: 0;
        }
</style>

@if (false)
{
    <script src="../../Scripts/jquery-1.7.2-vsdoc.js" type="text/javascript"></script>
}

<div id="header" class="gradient">
    <h2>ChatR</h2>
</div>

<div id="myContainer" class="container-fluid">
    <div id="compose" class="row-fluid">
        <div class="col-lg-1"></div>
        <div class="col-lg-11">
            <div class="row-fluid">
                <div class="col-lg-11"><textarea id="compose-box" rows="2" cols="50" placeholder="Type your message here" data-bind="value:parentMessage"></textarea></div>
                <div class="col-lg-1"><button id="send-btn" type="button" data-bind="click:sendMessage" class="btn btn-large btn-primary">Send</button>   </div>
            </div>
        </div>
    </div>
    <div class="row">
        <!-- This  is the contact box -->
        <div id="users-list" class="col-lg-1" style="border:1px solid gray;">
            <h4>Users</h4>
            <ul class="tree" data-bind="foreach: usersModel.contacts">
                <li><span class="user-box-name" data-bind="text: username"></span></li>
            </ul>
        </div>
        <!-- This  is the chat box -->
        <div id="chat-list" class="col-lg-11" style="border:1px solid gray; border-left:0;">
            <ul class="tree" data-bind="template: { name: 'message-template', foreach: messages,as: 'message' }"> </ul>
        </div>
    </div>
    <div><button id="json-btn" type="button" class="btn btn-large btn-primary">Save jSon</button></div>	
</div>

<script type="text/javascript" src="@Url.Content("/signalr/hubs")"></script>
<script type="text/javascript" src="@Url.Content("~/Js/chatR.js")"></script>
<script type="text/html" id="message-template">
    <!-- This  is the chat box -->
    <li>
        <div class="row-fluid">
            <span style="font-weight:normal;" data-bind="text: username"></span> :
            <br />
            <h5 ><span data-bind="html: content"></span>
                <span style="cursor:pointer;" class="label label-primary" data-bind="click:replyNow" title="Reply">Reply</span>
            </h5>

            <span style="background-color: #D8D8D8; font-size:x-small" class="chat-listitem-timestamp" data-bind="text: timestamp.toLocaleTimeString()"></span>
            <div data-bind="visible:doReply()" class="">
                <div class="input-group input-group-sm" style="max-width:350px;">
                    <input type="text" class="form-control" id="newMessage" data-bind="value:newMessage" placeholder="Reply here..." />
                    <span class="input-group-btn">
                        <button type="button" class="btn btn-default btn-xs" data-bind="click: replyToMessage" title="Send">
                            <span class="glyphicon glyphicon-ok-circle"></span>
                        </button>
                    </span>
                </div>
            </div>
            <div data-bind="if:replies().length > 0" class="row">
                <ul data-bind="template: { name: 'message-template', foreach: replies,as: 'message' }"></ul>
            </div>
        </div>
    </li>
</script>

<script type="text/javascript">


    Date.prototype.setISO8601 = function (dString) {

        var regexp = /(\d\d\d\d)(-)?(\d\d)(-)?(\d\d)(T)?(\d\d)(:)?(\d\d)(:)?(\d\d)(\.\d+)?(Z|([+-])(\d\d)(:)?(\d\d))/;

        if (dString.toString().match(new RegExp(regexp))) {
            var d = dString.match(new RegExp(regexp));
            var offset = 0;

            this.setUTCDate(1);
            this.setUTCFullYear(parseInt(d[1], 10));
            this.setUTCMonth(parseInt(d[3], 10) - 1);
            this.setUTCDate(parseInt(d[5], 10));
            this.setUTCHours(parseInt(d[7], 10));
            this.setUTCMinutes(parseInt(d[9], 10));
            this.setUTCSeconds(parseInt(d[11], 10));
            if (d[12])
                this.setUTCMilliseconds(parseFloat(d[12]) * 1000);
            else
                this.setUTCMilliseconds(0);
            if (d[13] != 'Z') {
                offset = (d[15] * 60) + parseInt(d[17], 10);
                offset *= ((d[14] == '-') ? -1 : 1);
                this.setTime(this.getTime() - offset * 60 * 1000);
            }
        }
        else {
            this.setTime(Date.parse(dString));
        }
        return this;
    };

    // Proxy creation
    var chatHub = $.connection.chatHub; // chatHub is the name of the Hub as declared in server side code

    var sendChatMsg = function (chatMessage) {

        if (chatMessage && chatMessage != null) {
            chatHub.server.send(chatMessage).done(function () {
                //$("#compose-box").val("");
            }).fail(function (e) {
                alert("Could not connect to server");
            });
        }
    }

    $(document).ready(function () {
        var chatHub = $.connection.chatHub; // chatHub is the name of the Hub as declared in server side code
        //alert(chat);
        var users = new chatR.connectedUsersViewModel();
        var currentUser = new chatR.user(@Html.Raw(Json.Encode(Model))); // The username chose by the user is stored in the model
        var chat = new chatR.chatViewModel(users, currentUser, sendChatMsg);


        chatHub.state.username = currentUser.username; // This is the round-trip state

        // Client-side event handlers, as declared inside the  Hub
        chatHub.client.onMessageReceived = function (message) {
            var date = new Date();
            date.setISO8601(message.Timestamp);
            //alert(message.Content);
            sessionStorage.setItem("Message", message);
            chat.addMessage(new chatR.chatMessage(message.Id, message.ParentId, message.Username, message.Content, date, sendChatMsg));
            $("#chat-list").scrollTo('max');            
        }

        chatHub.client.leaves = function (userId, username, timestamp) {
            var disconnectedUser = new chatR.user(username, userId);
            users.customRemove(disconnectedUser);
        }

        chatHub.client.joins = function (userId, username, timestamp) {
            var connectedUser = new chatR.user(username, userId);
            users.contacts.push(connectedUser);
        }

        //ko.applyBindings(users, $("#users-list")[0]);
        ko.applyBindings(chat, document.getElementById("myContainer"));

        $.connection.hub.start()
                    .done(function () {
                        chatHub.server.getConnectedUsers()
                                    .done(function (connectedUsers) {
                                        ko.utils.arrayForEach(connectedUsers, function (item) {
                                            users.contacts.push(new chatR.user(item.Username, item.Id));
                                        });
                                    }).done(function () {
                                        chatHub.server.joined();
                                    });
        });

        $('#json-btn').click(function () {
            var jsonData = ko.toJSON(chat);
            alert(jsonData);
        });
    });

</script>
