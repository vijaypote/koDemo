<!--[if gte IE 9]>
  <style type="text/css">
    .gradient {
       filter: none;
    }
  </style>
<![endif]-->

<style>
    body {
        background-color: #E6E6E6;
    }


    body {
        background: white;
        font-family: Segoe,"Segoe UI",Calibri,Arial,Sans-Serif;
        padding: 50px;
    }

    /* Framework start from here */
    ul.tree,
    ul.tree ul {
        list-style: none;
        margin: 0;
        padding: 0;
    }

        ul.tree ul {
            margin-left: 10px; /* indentation */
            position: relative;
        }

            ul.tree ul:before {
                content: "";
                display: block;
                width: 0;
                position: absolute;
                top: 0;
                bottom: 0;
            }

        ul.tree li {
            margin: 0;
            padding: 0 12px; /* indentation + 2 */
            color: #369;
            position: relative;
            margin-left: 15px;
        }

        ul.tree ul li:before {
            display: block;
            width: 10px; /* same with indentation */
            height: 0;
            position: absolute;
            top: 10px;
            left: 0;
        }

        ul.tree ul li:last-child:before {
            background: white; /* same with body background */
            height: auto;
            top: 10px; /* (line-height/2) */
            bottom: 0;
        }

    #myContainer {
        margin-top: 20px;
        height: 800px;
        width: 1200px;
        border: 1px solid #aaa;
        border-radius: 5px;
    }

    #chat-list {
        margin-top: 20px;
        padding-top: 20px;
        padding-right: 20px;
        border-top: 1px solid #D8D8D8;
        overflow-y: auto;
        overflow-x:auto;
        height: 720px;
        min-height: 720px;
    }

    #users-list {
        border-right: 1px solid #D8D8D8;
        height: 100%;
        min-height: 800px;
        overflow-y: auto;
    }

    .padding-left-0 {
        padding-left: 0;
    }

    .padding-right-0 {
        padding-right: 0;
    }

    .tsc_clear {
        clear: both;
        padding: 0;
        margin: 0;
        width: 100%;
        font-size: 0px;
        line-height: 0px;
    }

    .tsc_clean_comment {
        margin-bottom: 16px;
        width: 700px;
    }

        .tsc_clean_comment .avatar_box {
            float: left;
            width: 80px;
            
        }

        .tsc_clean_comment .avatar {
            background: #fff;
            padding: 4px;
            border: 1px solid #d8d8d8;
            margin-top: 10px;
            position: relative;
        }

        .tsc_clean_comment .username {
            color: #383838;
            font-weight: bold;
            clear: left;
        }

        .tsc_clean_comment .comment_box {
            float: right;
            padding-bottom: 8px;
            width: 600px;
            height: auto;
            background: #fff;
            border: 1px solid #d8d8d8;
            position: relative;
            margin-bottom:20px;
        }

            .tsc_clean_comment .comment_box:before {
                content: '';
                width: 13px;
                height: 13px;
                background: #fff;
                border-left: 1px solid #d8d8d8;
                border-bottom: 1px solid #d8d8d8;
                position: absolute;
                top: 24px;
                left: -8px;
                transform: rotate(45deg);
                -webkit-transform: rotate(45deg);
                -moz-transform: rotate(45deg);
                -ms-transform: rotate(45deg);
                -o-transform: rotate(45deg);
            }

        .tsc_clean_comment .comment_paragraph {
            color: #454545;
            line-height: 14px;
            margin: 4px 10px 0 15px;
            padding-bottom:20px;
        }

            .tsc_clean_comment .comment_paragraph:focus {
                outline: none;
            }

        .tsc_clean_comment .reply {
            font-size: 0.85em;
            color: #b7b7b7;
            margin-left: 23px;
            text-decoration: none;
            margin-top: 8px;
            position: relative;
            padding-bottom: 10px;
        }

            .tsc_clean_comment .reply:before {
                content: url(../content/images/bubble.png);
                width: 13px;
                height: 11px;
                position: relative;
                left: -7px;
                top: 2px;
            }

        .tsc_clean_comment .date {
            float: right;
            font-size: 0.85em;
            color: #454545;
            margin-top: 0;
            margin-right: 15px;
        }
</style>

@if (false)
{
    <script src="../../Scripts/jquery-1.7.2-vsdoc.js" type="text/javascript"></script>
}

<div id="header" class="gradient">
    <h2>ChatR</h2>
</div>

<div id="myContainer" class="container-fluid">

    <div class="col-md-2 padding-right-0">
        <!-- This  is the contact box -->
        <div id="users-list">
            <h4>Users</h4>
            <ul class="tree" data-bind="foreach: usersModel.contacts">
                <li><span class="user-box-name" data-bind="text: username"></span></li>
            </ul>
        </div>
    </div>

    <div class="col-md-10 padding-left-0 padding-right-0">
        <div id="compose" class="row">
            <div class="col-md-12">
                <div class="row-fluid">
                    <div class="col-md-10"><textarea id="compose-box" rows="2" cols="50" placeholder="Type your message here" data-bind="value:parentMessage"></textarea></div>
                    <div class="col-md-2"><button id="send-btn" type="button" data-bind="click:sendMessage" class="btn btn-large btn-primary">Send</button>   </div>
                </div>
            </div>
        </div>

        <!-- This  is the chat box -->
        <div id="chat-list">
            <ul class="tree" data-bind="template: { name: 'message-template', foreach: messages,as: 'message' }"> </ul>
        </div>
    </div>
</div>

<script type="text/javascript" src="@Url.Content("/signalr/hubs")"></script>
<script type="text/javascript" src="@Url.Content("~/Js/chatR.js")"></script>
<script type="text/html" id="message-template">
    <!-- This  is the chat box -->
    <li>
        <div class="row-fluid tsc_clean_comment">
            <div class="avatar_box">
                <img alt="Avatar" src="../Content/images/user.gif" class="avatar" />
                <p class="username" data-bind="text: username"></p>
            </div>
            <div class="comment_box fr">
                <p class="comment_paragraph" contenteditable="true" data-bind="html: content"></p>
                <a href="#" class="reply" data-bind="click:replyNow">Reply</a> <span class="date" data-bind="text: timestamp.toLocaleTimeString()"></span>

                <div data-bind="visible:doReply()">
                    <div class="input-group input-group-sm" style="max-width:350px;">
                        <input type="text" class="form-control" id="newMessage" data-bind="value:newMessage" placeholder="Reply here..." />
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-default btn-xs" data-bind="click: replyToMessage" title="Send">
                                <span class="glyphicon glyphicon-ok-circle"></span>
                            </button>
                        </span>
                    </div>
                </div>

            </div>
            <div data-bind="if:replies().length > 0">
                <ul data-bind="template: { name: 'message-template', foreach: replies,as: 'message' }"></ul>
            </div>
        </div>
    </li>
</script>

<script type="text/javascript">


    Date.prototype.setISO8601 = function (dString) {

        var regexp = /(\d\d\d\d)(-)?(\d\d)(-)?(\d\d)(T)?(\d\d)(:)?(\d\d)(:)?(\d\d)(\.\d+)?(Z|([+-])(\d\d)(:)?(\d\d))/;

        if (dString.toString().match(new RegExp(regexp))) {
            var d = dString.match(new RegExp(regexp));
            var offset = 0;

            this.setUTCDate(1);
            this.setUTCFullYear(parseInt(d[1], 10));
            this.setUTCMonth(parseInt(d[3], 10) - 1);
            this.setUTCDate(parseInt(d[5], 10));
            this.setUTCHours(parseInt(d[7], 10));
            this.setUTCMinutes(parseInt(d[9], 10));
            this.setUTCSeconds(parseInt(d[11], 10));
            if (d[12])
                this.setUTCMilliseconds(parseFloat(d[12]) * 1000);
            else
                this.setUTCMilliseconds(0);
            if (d[13] != 'Z') {
                offset = (d[15] * 60) + parseInt(d[17], 10);
                offset *= ((d[14] == '-') ? -1 : 1);
                this.setTime(this.getTime() - offset * 60 * 1000);
            }
        }
        else {
            this.setTime(Date.parse(dString));
        }
        return this;
    };

    // Proxy creation
    var chatHub = $.connection.chatHub; // chatHub is the name of the Hub as declared in server side code

    var sendChatMsg = function (chatMessage) {

        if (chatMessage && chatMessage != null) {
            chatHub.server.send(chatMessage).done(function () {
                //$("#compose-box").val("");
            }).fail(function (e) {
                alert("Could not connect to server");
            });
        }
    }

    $(document).ready(function () {
        var chatHub = $.connection.chatHub; // chatHub is the name of the Hub as declared in server side code
        //alert(chat);
        var users = new chatR.connectedUsersViewModel();
        var currentUser = new chatR.user(@Html.Raw(Json.Encode(Model))); // The username chose by the user is stored in the model
        var chat = new chatR.chatViewModel(users, currentUser, sendChatMsg);


        chatHub.state.username = currentUser.username; // This is the round-trip state

        // Client-side event handlers, as declared inside the  Hub
        chatHub.client.onMessageReceived = function (message) {
            var date = new Date();
            date.setISO8601(message.Timestamp);
            //alert(message.Content);
            sessionStorage.setItem("Message", message);
            chat.addMessage(new chatR.chatMessage(message.Id, message.ParentId, message.NestLevel, message.Username, message.Content, date, sendChatMsg));
            $("#chat-list").scrollTo('max');

            //var jsonData = ko.toJSON(message);
            //alert(jsonData);
        }

        chatHub.client.leaves = function (userId, username, timestamp) {
            var disconnectedUser = new chatR.user(username, userId);
            users.customRemove(disconnectedUser);
        }

        chatHub.client.joins = function (userId, username, timestamp) {
            var connectedUser = new chatR.user(username, userId);
            users.contacts.push(connectedUser);
        }

        //ko.applyBindings(users, $("#users-list")[0]);
        ko.applyBindings(chat, document.getElementById("myContainer"));


        //$("#myContainer").splitter();

        $.connection.hub.start()
                    .done(function () {
                        chatHub.server.getConnectedUsers()
                                    .done(function (connectedUsers) {
                                        ko.utils.arrayForEach(connectedUsers, function (item) {
                                            users.contacts.push(new chatR.user(item.Username, item.Id));
                                        });
                                    }).done(function () {
                                        chatHub.server.joined();
                                    });
                    });
    });

</script>
